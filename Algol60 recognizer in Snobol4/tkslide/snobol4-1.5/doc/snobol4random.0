SNOBOL4RANDOM(1)                                              SNOBOL4RANDOM(1)



NNAAMMEE
       snobol4random - SNOBOL4 random number functions


SSYYNNOOPPSSIISS
       --IINNCCLLUUDDEE ''rraannddoomm..ssnnoo''

       NNUUMMBBEERR == RRAANNDDOOMM(())

       SSRRAANNDDOOMM((NNUUMMBBEERR))

       SSRRAANNDDOOMMDDEEVV(())


DDEESSCCRRIIPPTTIIOONN
       The RRAANNDDOOMM(()) function uses a non-linear additive feedback random number
       generator employing a default table of size 31 long integers to  return
       successive pseudo-random numbers in the range from 0 to (2**31)-1.  The
       period of this random number generator  is  very  large,  approximately
       16*((2**31)-1).


       The SSRRAANNDDOOMM(()) function sets its IINNTTEEGGEERR argument seed as the seed for a
       new sequence of pseudo-random  numbers  to  be  returned  by  RRAANNDDOOMM(()).
       These  sequences are repeatable by calling SSRRAANNDDOOMM(()) with the same seed
       value.  RRAANNDDOOMM(()) will by default produce a sequence of numbers that can
       be duplicated by calling SSRRAANNDDOOMM(()) with 1 as the seed.

       The  SSRRAANNDDOOMMDDEEVV(()) routine initializes a state array using the rraannddoomm(4)
       random number device (if available) which returns good random  numbers,
       suitable for cryptographic use.  Note that this particular seeding pro-
       cedure can generate states which are impossible to reproduce by calling
       SSRRAANNDDOOMM(())  with any value, since the succeeding terms in the state buf-
       fer are no longer derived from the LC  algorithm  applied  to  a  fixed
       seed.   Data  from  the  rraannddoomm(4) device may be precious, and repeated
       calls to SSRRAANNDDOOMMDDEEVV(()) should be avoided.  When the rraannddoomm(4) device  is
       not  available, a 32-bit seed will be generated using time, process id,
       and an element of the process stack.

SSEEEE AALLSSOO
       ssnnoobbooll44(1), rraannddoomm(3), rraannddoomm(4)

AAUUTTHHOORR
       Philip L. Budne



SNOBOL                            4 Jan 2012                  SNOBOL4RANDOM(1)
