(define expcond1 '(cond ((and (> 3 2))(+ 1 2))))
(expand expcond1)
(define expcond2 '(cond ((> 1 2))((> 3 2)(+ 1 2))))
(expand expcond2)
(define expcond3 '(cond ((> 1 2)(+ 1 1))((> 3 2)(cond ((and (> 3 2))(+ 1 2))))))
(expand expcond3)
(define expa1 '(and (> 3 2)))
(expand expa1)
(define expa2 '(and (> 3 2)(and (< 1 2))))
(expand expa2)
(define explet '(let ((x 1)(y 2)) (if (> x y)(+ x x)(+ x y))))
(expand explet)
(define explet* '(let* ((x 1)(y 2)) (+ 1 1)(+ x y)))
(expand explet*)
(define expletrec '(letrec ((x 1)(y 2)) (+ 1 1)(+ x y)))
(expand expletrec)
(define expcase '(case (+ 1 1) ((1 3 5) (+ 1 1) 'odd)((2 4 6) (+ 2 2) (case (+ 2 2) ((2 4 6) 'boo)))))
(expand expcase)
(define explambda '((lambda (x y) (+ x y))1 2))
	      